/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// CreateBranch
    /// </summary>
    [DataContract(Name = "CreateBranch")]
    public partial class CreateBranch : IEquatable<CreateBranch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBranch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranch" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="customProperties">customProperties.</param>
        /// <param name="inheritGroupAccess">inheritGroupAccess.</param>
        /// <param name="inheritAutomation">inheritAutomation.</param>
        /// <param name="viewId">viewId.</param>
        public CreateBranch(string name = default(string), string description = default(string), Dictionary<string, Object> customProperties = default(Dictionary<string, Object>), bool inheritGroupAccess = default(bool), bool inheritAutomation = default(bool), string viewId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateBranch and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.CustomProperties = customProperties;
            this.InheritGroupAccess = inheritGroupAccess;
            this.InheritAutomation = inheritAutomation;
            this.ViewId = viewId;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CustomProperties
        /// </summary>
        [DataMember(Name = "customProperties", EmitDefaultValue = true)]
        public Dictionary<string, Object> CustomProperties { get; set; }

        /// <summary>
        /// Gets or Sets InheritGroupAccess
        /// </summary>
        [DataMember(Name = "inheritGroupAccess", EmitDefaultValue = true)]
        public bool InheritGroupAccess { get; set; }

        /// <summary>
        /// Gets or Sets InheritAutomation
        /// </summary>
        [DataMember(Name = "inheritAutomation", EmitDefaultValue = true)]
        public bool InheritAutomation { get; set; }

        /// <summary>
        /// Gets or Sets ViewId
        /// </summary>
        [DataMember(Name = "viewId", EmitDefaultValue = true)]
        public string ViewId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBranch {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  InheritGroupAccess: ").Append(InheritGroupAccess).Append("\n");
            sb.Append("  InheritAutomation: ").Append(InheritAutomation).Append("\n");
            sb.Append("  ViewId: ").Append(ViewId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBranch);
        }

        /// <summary>
        /// Returns true if CreateBranch instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBranch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBranch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CustomProperties == input.CustomProperties ||
                    this.CustomProperties != null &&
                    input.CustomProperties != null &&
                    this.CustomProperties.SequenceEqual(input.CustomProperties)
                ) && 
                (
                    this.InheritGroupAccess == input.InheritGroupAccess ||
                    this.InheritGroupAccess.Equals(input.InheritGroupAccess)
                ) && 
                (
                    this.InheritAutomation == input.InheritAutomation ||
                    this.InheritAutomation.Equals(input.InheritAutomation)
                ) && 
                (
                    this.ViewId == input.ViewId ||
                    (this.ViewId != null &&
                    this.ViewId.Equals(input.ViewId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CustomProperties != null)
                {
                    hashCode = (hashCode * 59) + this.CustomProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InheritGroupAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.InheritAutomation.GetHashCode();
                if (this.ViewId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
