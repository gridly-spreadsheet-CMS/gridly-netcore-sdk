/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// File
    /// </summary>
    [DataContract(Name = "File")]
    public partial class File : IEquatable<File>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="File" /> class.
        /// </summary>
        /// <param name="absolute">absolute.</param>
        /// <param name="absoluteFile">absoluteFile.</param>
        /// <param name="absolutePath">absolutePath.</param>
        /// <param name="canonicalFile">canonicalFile.</param>
        /// <param name="canonicalPath">canonicalPath.</param>
        /// <param name="directory">directory.</param>
        /// <param name="file">file.</param>
        /// <param name="freeSpace">freeSpace.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="name">name.</param>
        /// <param name="parent">parent.</param>
        /// <param name="parentFile">parentFile.</param>
        /// <param name="path">path.</param>
        /// <param name="totalSpace">totalSpace.</param>
        /// <param name="usableSpace">usableSpace.</param>
        public File(bool absolute = default(bool), File absoluteFile = default(File), string absolutePath = default(string), File canonicalFile = default(File), string canonicalPath = default(string), bool directory = default(bool), bool file = default(bool), long freeSpace = default(long), bool hidden = default(bool), string name = default(string), string parent = default(string), File parentFile = default(File), string path = default(string), long totalSpace = default(long), long usableSpace = default(long))
        {
            this.Absolute = absolute;
            this.AbsoluteFile = absoluteFile;
            this.AbsolutePath = absolutePath;
            this.CanonicalFile = canonicalFile;
            this.CanonicalPath = canonicalPath;
            this.Directory = directory;
            this._File = file;
            this.FreeSpace = freeSpace;
            this.Hidden = hidden;
            this.Name = name;
            this.Parent = parent;
            this.ParentFile = parentFile;
            this.Path = path;
            this.TotalSpace = totalSpace;
            this.UsableSpace = usableSpace;
        }

        /// <summary>
        /// Gets or Sets Absolute
        /// </summary>
        [DataMember(Name = "absolute", EmitDefaultValue = true)]
        public bool Absolute { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteFile
        /// </summary>
        [DataMember(Name = "absoluteFile", EmitDefaultValue = false)]
        public File AbsoluteFile { get; set; }

        /// <summary>
        /// Gets or Sets AbsolutePath
        /// </summary>
        [DataMember(Name = "absolutePath", EmitDefaultValue = false)]
        public string AbsolutePath { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalFile
        /// </summary>
        [DataMember(Name = "canonicalFile", EmitDefaultValue = false)]
        public File CanonicalFile { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalPath
        /// </summary>
        [DataMember(Name = "canonicalPath", EmitDefaultValue = false)]
        public string CanonicalPath { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = true)]
        public bool Directory { get; set; }

        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public bool _File { get; set; }

        /// <summary>
        /// Gets or Sets FreeSpace
        /// </summary>
        [DataMember(Name = "freeSpace", EmitDefaultValue = false)]
        public long FreeSpace { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public string Parent { get; set; }

        /// <summary>
        /// Gets or Sets ParentFile
        /// </summary>
        [DataMember(Name = "parentFile", EmitDefaultValue = false)]
        public File ParentFile { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets TotalSpace
        /// </summary>
        [DataMember(Name = "totalSpace", EmitDefaultValue = false)]
        public long TotalSpace { get; set; }

        /// <summary>
        /// Gets or Sets UsableSpace
        /// </summary>
        [DataMember(Name = "usableSpace", EmitDefaultValue = false)]
        public long UsableSpace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class File {\n");
            sb.Append("  Absolute: ").Append(Absolute).Append("\n");
            sb.Append("  AbsoluteFile: ").Append(AbsoluteFile).Append("\n");
            sb.Append("  AbsolutePath: ").Append(AbsolutePath).Append("\n");
            sb.Append("  CanonicalFile: ").Append(CanonicalFile).Append("\n");
            sb.Append("  CanonicalPath: ").Append(CanonicalPath).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("  FreeSpace: ").Append(FreeSpace).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ParentFile: ").Append(ParentFile).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  TotalSpace: ").Append(TotalSpace).Append("\n");
            sb.Append("  UsableSpace: ").Append(UsableSpace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as File);
        }

        /// <summary>
        /// Returns true if File instances are equal
        /// </summary>
        /// <param name="input">Instance of File to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(File input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Absolute == input.Absolute ||
                    this.Absolute.Equals(input.Absolute)
                ) && 
                (
                    this.AbsoluteFile == input.AbsoluteFile ||
                    (this.AbsoluteFile != null &&
                    this.AbsoluteFile.Equals(input.AbsoluteFile))
                ) && 
                (
                    this.AbsolutePath == input.AbsolutePath ||
                    (this.AbsolutePath != null &&
                    this.AbsolutePath.Equals(input.AbsolutePath))
                ) && 
                (
                    this.CanonicalFile == input.CanonicalFile ||
                    (this.CanonicalFile != null &&
                    this.CanonicalFile.Equals(input.CanonicalFile))
                ) && 
                (
                    this.CanonicalPath == input.CanonicalPath ||
                    (this.CanonicalPath != null &&
                    this.CanonicalPath.Equals(input.CanonicalPath))
                ) && 
                (
                    this.Directory == input.Directory ||
                    this.Directory.Equals(input.Directory)
                ) && 
                (
                    this._File == input._File ||
                    this._File.Equals(input._File)
                ) && 
                (
                    this.FreeSpace == input.FreeSpace ||
                    this.FreeSpace.Equals(input.FreeSpace)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.ParentFile == input.ParentFile ||
                    (this.ParentFile != null &&
                    this.ParentFile.Equals(input.ParentFile))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.TotalSpace == input.TotalSpace ||
                    this.TotalSpace.Equals(input.TotalSpace)
                ) && 
                (
                    this.UsableSpace == input.UsableSpace ||
                    this.UsableSpace.Equals(input.UsableSpace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Absolute.GetHashCode();
                if (this.AbsoluteFile != null)
                {
                    hashCode = (hashCode * 59) + this.AbsoluteFile.GetHashCode();
                }
                if (this.AbsolutePath != null)
                {
                    hashCode = (hashCode * 59) + this.AbsolutePath.GetHashCode();
                }
                if (this.CanonicalFile != null)
                {
                    hashCode = (hashCode * 59) + this.CanonicalFile.GetHashCode();
                }
                if (this.CanonicalPath != null)
                {
                    hashCode = (hashCode * 59) + this.CanonicalPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                hashCode = (hashCode * 59) + this._File.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeSpace.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.ParentFile != null)
                {
                    hashCode = (hashCode * 59) + this.ParentFile.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalSpace.GetHashCode();
                hashCode = (hashCode * 59) + this.UsableSpace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
