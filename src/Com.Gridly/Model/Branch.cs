/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// Branch
    /// </summary>
    [DataContract(Name = "Branch")]
    public partial class Branch : IEquatable<Branch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Branch" /> class.
        /// </summary>
        /// <param name="columns">columns.</param>
        /// <param name="defaultAccessViewId">defaultAccessViewId.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="isMaster">isMaster.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name.</param>
        public Branch(List<ViewColumn> columns = default(List<ViewColumn>), string defaultAccessViewId = default(string), string description = default(string), string id = default(string), bool isMaster = default(bool), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string))
        {
            this.Columns = columns;
            this.DefaultAccessViewId = defaultAccessViewId;
            this.Description = description;
            this.Id = id;
            this.IsMaster = isMaster;
            this.Metadata = metadata;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = false)]
        public List<ViewColumn> Columns { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAccessViewId
        /// </summary>
        [DataMember(Name = "defaultAccessViewId", EmitDefaultValue = false)]
        public string DefaultAccessViewId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsMaster
        /// </summary>
        [DataMember(Name = "isMaster", EmitDefaultValue = true)]
        public bool IsMaster { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Branch {\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  DefaultAccessViewId: ").Append(DefaultAccessViewId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMaster: ").Append(IsMaster).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Branch);
        }

        /// <summary>
        /// Returns true if Branch instances are equal
        /// </summary>
        /// <param name="input">Instance of Branch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Branch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.DefaultAccessViewId == input.DefaultAccessViewId ||
                    (this.DefaultAccessViewId != null &&
                    this.DefaultAccessViewId.Equals(input.DefaultAccessViewId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsMaster == input.IsMaster ||
                    this.IsMaster.Equals(input.IsMaster)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.DefaultAccessViewId != null)
                    hashCode = hashCode * 59 + this.DefaultAccessViewId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsMaster.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
