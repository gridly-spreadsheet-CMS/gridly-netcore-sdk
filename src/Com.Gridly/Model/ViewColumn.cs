/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// ViewColumn
    /// </summary>
    [DataContract(Name = "ViewColumn")]
    public partial class ViewColumn : IEquatable<ViewColumn>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SingleLine for value: singleLine
            /// </summary>
            [EnumMember(Value = "singleLine")]
            SingleLine = 1,

            /// <summary>
            /// Enum MultipleLines for value: multipleLines
            /// </summary>
            [EnumMember(Value = "multipleLines")]
            MultipleLines = 2,

            /// <summary>
            /// Enum RichText for value: richText
            /// </summary>
            [EnumMember(Value = "richText")]
            RichText = 3,

            /// <summary>
            /// Enum Markdown for value: markdown
            /// </summary>
            [EnumMember(Value = "markdown")]
            Markdown = 4,

            /// <summary>
            /// Enum SingleSelection for value: singleSelection
            /// </summary>
            [EnumMember(Value = "singleSelection")]
            SingleSelection = 5,

            /// <summary>
            /// Enum MultipleSelections for value: multipleSelections
            /// </summary>
            [EnumMember(Value = "multipleSelections")]
            MultipleSelections = 6,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 7,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 8,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 9,

            /// <summary>
            /// Enum Files for value: files
            /// </summary>
            [EnumMember(Value = "files")]
            Files = 10,

            /// <summary>
            /// Enum Reference for value: reference
            /// </summary>
            [EnumMember(Value = "reference")]
            Reference = 11,

            /// <summary>
            /// Enum Lookup for value: lookup
            /// </summary>
            [EnumMember(Value = "lookup")]
            Lookup = 12,

            /// <summary>
            /// Enum Language for value: language
            /// </summary>
            [EnumMember(Value = "language")]
            Language = 13,

            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 14,

            /// <summary>
            /// Enum Yaml for value: yaml
            /// </summary>
            [EnumMember(Value = "yaml")]
            Yaml = 15,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 16,

            /// <summary>
            /// Enum Formula for value: formula
            /// </summary>
            [EnumMember(Value = "formula")]
            Formula = 17

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumn" /> class.
        /// </summary>
        /// <param name="dependsOn">dependsOn.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="isSource">isSource.</param>
        /// <param name="isTarget">isTarget.</param>
        /// <param name="languageCode">languageCode.</param>
        /// <param name="name">name.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="reference">reference.</param>
        /// <param name="selectionOptions">selectionOptions.</param>
        /// <param name="type">type.</param>
        public ViewColumn(string dependsOn = default(string), string description = default(string), string id = default(string), bool isSource = default(bool), bool isTarget = default(bool), string languageCode = default(string), string name = default(string), NumberFormat numberFormat = default(NumberFormat), ColumnReference reference = default(ColumnReference), List<string> selectionOptions = default(List<string>), TypeEnum? type = default(TypeEnum?))
        {
            this.DependsOn = dependsOn;
            this.Description = description;
            this.Id = id;
            this.IsSource = isSource;
            this.IsTarget = isTarget;
            this.LanguageCode = languageCode;
            this.Name = name;
            this.NumberFormat = numberFormat;
            this.Reference = reference;
            this.SelectionOptions = selectionOptions;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets DependsOn
        /// </summary>
        [DataMember(Name = "dependsOn", EmitDefaultValue = false)]
        public string DependsOn { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsSource
        /// </summary>
        [DataMember(Name = "isSource", EmitDefaultValue = true)]
        public bool IsSource { get; set; }

        /// <summary>
        /// Gets or Sets IsTarget
        /// </summary>
        [DataMember(Name = "isTarget", EmitDefaultValue = true)]
        public bool IsTarget { get; set; }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [DataMember(Name = "languageCode", EmitDefaultValue = false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name = "numberFormat", EmitDefaultValue = false)]
        public NumberFormat NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public ColumnReference Reference { get; set; }

        /// <summary>
        /// Gets or Sets SelectionOptions
        /// </summary>
        [DataMember(Name = "selectionOptions", EmitDefaultValue = false)]
        public List<string> SelectionOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ViewColumn {\n");
            sb.Append("  DependsOn: ").Append(DependsOn).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSource: ").Append(IsSource).Append("\n");
            sb.Append("  IsTarget: ").Append(IsTarget).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SelectionOptions: ").Append(SelectionOptions).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewColumn);
        }

        /// <summary>
        /// Returns true if ViewColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewColumn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DependsOn == input.DependsOn ||
                    (this.DependsOn != null &&
                    this.DependsOn.Equals(input.DependsOn))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsSource == input.IsSource ||
                    this.IsSource.Equals(input.IsSource)
                ) && 
                (
                    this.IsTarget == input.IsTarget ||
                    this.IsTarget.Equals(input.IsTarget)
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NumberFormat == input.NumberFormat ||
                    (this.NumberFormat != null &&
                    this.NumberFormat.Equals(input.NumberFormat))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.SelectionOptions == input.SelectionOptions ||
                    this.SelectionOptions != null &&
                    input.SelectionOptions != null &&
                    this.SelectionOptions.SequenceEqual(input.SelectionOptions)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DependsOn != null)
                {
                    hashCode = (hashCode * 59) + this.DependsOn.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSource.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTarget.GetHashCode();
                if (this.LanguageCode != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageCode.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NumberFormat != null)
                {
                    hashCode = (hashCode * 59) + this.NumberFormat.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.SelectionOptions != null)
                {
                    hashCode = (hashCode * 59) + this.SelectionOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
