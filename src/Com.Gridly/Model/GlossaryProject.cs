/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// GlossaryProject
    /// </summary>
    [DataContract(Name = "GlossaryProject")]
    public partial class GlossaryProject : IEquatable<GlossaryProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlossaryProject" /> class.
        /// </summary>
        /// <param name="projectId">projectId.</param>
        /// <param name="databaseIds">databaseIds.</param>
        public GlossaryProject(long projectId = default(long), List<string> databaseIds = default(List<string>))
        {
            this.ProjectId = projectId;
            this.DatabaseIds = databaseIds;
        }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "projectId", EmitDefaultValue = true)]
        public long ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseIds
        /// </summary>
        [DataMember(Name = "databaseIds", EmitDefaultValue = true)]
        public List<string> DatabaseIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GlossaryProject {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  DatabaseIds: ").Append(DatabaseIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlossaryProject);
        }

        /// <summary>
        /// Returns true if GlossaryProject instances are equal
        /// </summary>
        /// <param name="input">Instance of GlossaryProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlossaryProject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.DatabaseIds == input.DatabaseIds ||
                    this.DatabaseIds != null &&
                    input.DatabaseIds != null &&
                    this.DatabaseIds.SequenceEqual(input.DatabaseIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                if (this.DatabaseIds != null)
                {
                    hashCode = (hashCode * 59) + this.DatabaseIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
