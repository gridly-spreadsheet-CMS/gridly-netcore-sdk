/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.27.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// TranslationCount
    /// </summary>
    [DataContract(Name = "TranslationCount")]
    public partial class TranslationCount : IEquatable<TranslationCount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationCount" /> class.
        /// </summary>
        /// <param name="all">all.</param>
        /// <param name="outOfDate">outOfDate.</param>
        /// <param name="unset">unset.</param>
        /// <param name="upToDate">upToDate.</param>
        public TranslationCount(long all = default(long), long outOfDate = default(long), long unset = default(long), long upToDate = default(long))
        {
            this.All = all;
            this.OutOfDate = outOfDate;
            this.Unset = unset;
            this.UpToDate = upToDate;
        }

        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name = "all", EmitDefaultValue = true)]
        public long All { get; set; }

        /// <summary>
        /// Gets or Sets OutOfDate
        /// </summary>
        [DataMember(Name = "outOfDate", EmitDefaultValue = true)]
        public long OutOfDate { get; set; }

        /// <summary>
        /// Gets or Sets Unset
        /// </summary>
        [DataMember(Name = "unset", EmitDefaultValue = true)]
        public long Unset { get; set; }

        /// <summary>
        /// Gets or Sets UpToDate
        /// </summary>
        [DataMember(Name = "upToDate", EmitDefaultValue = true)]
        public long UpToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranslationCount {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  OutOfDate: ").Append(OutOfDate).Append("\n");
            sb.Append("  Unset: ").Append(Unset).Append("\n");
            sb.Append("  UpToDate: ").Append(UpToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslationCount);
        }

        /// <summary>
        /// Returns true if TranslationCount instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslationCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslationCount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.All == input.All ||
                    this.All.Equals(input.All)
                ) && 
                (
                    this.OutOfDate == input.OutOfDate ||
                    this.OutOfDate.Equals(input.OutOfDate)
                ) && 
                (
                    this.Unset == input.Unset ||
                    this.Unset.Equals(input.Unset)
                ) && 
                (
                    this.UpToDate == input.UpToDate ||
                    this.UpToDate.Equals(input.UpToDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.All.GetHashCode();
                hashCode = (hashCode * 59) + this.OutOfDate.GetHashCode();
                hashCode = (hashCode * 59) + this.Unset.GetHashCode();
                hashCode = (hashCode * 59) + this.UpToDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
