/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// Grid
    /// </summary>
    [DataContract(Name = "Grid")]
    public partial class Grid : IEquatable<Grid>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Grid" /> class.
        /// </summary>
        /// <param name="branchId">branchId.</param>
        /// <param name="branches">branches.</param>
        /// <param name="customProperties">customProperties.</param>
        /// <param name="defaultAccessViewId">defaultAccessViewId.</param>
        /// <param name="groupTagDefinition">groupTagDefinition.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="parentGridId">parentGridId.</param>
        /// <param name="status">status.</param>
        public Grid(string branchId = default(string), List<Grid> branches = default(List<Grid>), Dictionary<string, Object> customProperties = default(Dictionary<string, Object>), string defaultAccessViewId = default(string), List<string> groupTagDefinition = default(List<string>), string id = default(string), string name = default(string), string parentGridId = default(string), string status = default(string))
        {
            this.BranchId = branchId;
            this.Branches = branches;
            this.CustomProperties = customProperties;
            this.DefaultAccessViewId = defaultAccessViewId;
            this.GroupTagDefinition = groupTagDefinition;
            this.Id = id;
            this.Name = name;
            this.ParentGridId = parentGridId;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets BranchId
        /// </summary>
        [DataMember(Name = "branchId", EmitDefaultValue = false)]
        public string BranchId { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name = "branches", EmitDefaultValue = false)]
        public List<Grid> Branches { get; set; }

        /// <summary>
        /// Gets or Sets CustomProperties
        /// </summary>
        [DataMember(Name = "customProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomProperties { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAccessViewId
        /// </summary>
        [DataMember(Name = "defaultAccessViewId", EmitDefaultValue = false)]
        public string DefaultAccessViewId { get; set; }

        /// <summary>
        /// Gets or Sets GroupTagDefinition
        /// </summary>
        [DataMember(Name = "groupTagDefinition", EmitDefaultValue = false)]
        public List<string> GroupTagDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentGridId
        /// </summary>
        [DataMember(Name = "parentGridId", EmitDefaultValue = false)]
        public string ParentGridId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Grid {\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  DefaultAccessViewId: ").Append(DefaultAccessViewId).Append("\n");
            sb.Append("  GroupTagDefinition: ").Append(GroupTagDefinition).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentGridId: ").Append(ParentGridId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Grid);
        }

        /// <summary>
        /// Returns true if Grid instances are equal
        /// </summary>
        /// <param name="input">Instance of Grid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Grid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BranchId == input.BranchId ||
                    (this.BranchId != null &&
                    this.BranchId.Equals(input.BranchId))
                ) && 
                (
                    this.Branches == input.Branches ||
                    this.Branches != null &&
                    input.Branches != null &&
                    this.Branches.SequenceEqual(input.Branches)
                ) && 
                (
                    this.CustomProperties == input.CustomProperties ||
                    this.CustomProperties != null &&
                    input.CustomProperties != null &&
                    this.CustomProperties.SequenceEqual(input.CustomProperties)
                ) && 
                (
                    this.DefaultAccessViewId == input.DefaultAccessViewId ||
                    (this.DefaultAccessViewId != null &&
                    this.DefaultAccessViewId.Equals(input.DefaultAccessViewId))
                ) && 
                (
                    this.GroupTagDefinition == input.GroupTagDefinition ||
                    this.GroupTagDefinition != null &&
                    input.GroupTagDefinition != null &&
                    this.GroupTagDefinition.SequenceEqual(input.GroupTagDefinition)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentGridId == input.ParentGridId ||
                    (this.ParentGridId != null &&
                    this.ParentGridId.Equals(input.ParentGridId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BranchId != null)
                    hashCode = hashCode * 59 + this.BranchId.GetHashCode();
                if (this.Branches != null)
                    hashCode = hashCode * 59 + this.Branches.GetHashCode();
                if (this.CustomProperties != null)
                    hashCode = hashCode * 59 + this.CustomProperties.GetHashCode();
                if (this.DefaultAccessViewId != null)
                    hashCode = hashCode * 59 + this.DefaultAccessViewId.GetHashCode();
                if (this.GroupTagDefinition != null)
                    hashCode = hashCode * 59 + this.GroupTagDefinition.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentGridId != null)
                    hashCode = hashCode * 59 + this.ParentGridId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
