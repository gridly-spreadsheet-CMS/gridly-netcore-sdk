/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// DateTimeFormat
    /// </summary>
    [DataContract(Name = "DateTimeFormat")]
    public partial class DateTimeFormat : IEquatable<DateTimeFormat>, IValidatableObject
    {
        /// <summary>
        /// Defines TimeFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeFormatEnum
        {
            /// <summary>
            /// Enum Hour12 for value: hour12
            /// </summary>
            [EnumMember(Value = "hour12")]
            Hour12 = 1,

            /// <summary>
            /// Enum Hour24 for value: hour24
            /// </summary>
            [EnumMember(Value = "hour24")]
            Hour24 = 2

        }


        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name = "timeFormat", EmitDefaultValue = true)]
        public TimeFormatEnum? TimeFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeFormat" /> class.
        /// </summary>
        /// <param name="dateFormat">dateFormat.</param>
        /// <param name="timeFormat">timeFormat.</param>
        /// <param name="zoneOffset">zoneOffset.</param>
        /// <param name="showTimeZone">showTimeZone.</param>
        public DateTimeFormat(DateFormat dateFormat = default(DateFormat), TimeFormatEnum? timeFormat = default(TimeFormatEnum?), string zoneOffset = default(string), bool showTimeZone = default(bool))
        {
            this.DateFormat = dateFormat;
            this.TimeFormat = timeFormat;
            this.ZoneOffset = zoneOffset;
            this.ShowTimeZone = showTimeZone;
        }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [DataMember(Name = "dateFormat", EmitDefaultValue = true)]
        public DateFormat DateFormat { get; set; }

        /// <summary>
        /// Gets or Sets ZoneOffset
        /// </summary>
        [DataMember(Name = "zoneOffset", EmitDefaultValue = true)]
        public string ZoneOffset { get; set; }

        /// <summary>
        /// Gets or Sets ShowTimeZone
        /// </summary>
        [DataMember(Name = "showTimeZone", EmitDefaultValue = true)]
        public bool ShowTimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateTimeFormat {\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  ZoneOffset: ").Append(ZoneOffset).Append("\n");
            sb.Append("  ShowTimeZone: ").Append(ShowTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateTimeFormat);
        }

        /// <summary>
        /// Returns true if DateTimeFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of DateTimeFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateTimeFormat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateFormat == input.DateFormat ||
                    (this.DateFormat != null &&
                    this.DateFormat.Equals(input.DateFormat))
                ) && 
                (
                    this.TimeFormat == input.TimeFormat ||
                    this.TimeFormat.Equals(input.TimeFormat)
                ) && 
                (
                    this.ZoneOffset == input.ZoneOffset ||
                    (this.ZoneOffset != null &&
                    this.ZoneOffset.Equals(input.ZoneOffset))
                ) && 
                (
                    this.ShowTimeZone == input.ShowTimeZone ||
                    this.ShowTimeZone.Equals(input.ShowTimeZone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DateFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeFormat.GetHashCode();
                if (this.ZoneOffset != null)
                {
                    hashCode = (hashCode * 59) + this.ZoneOffset.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowTimeZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
