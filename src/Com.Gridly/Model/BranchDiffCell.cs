/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// BranchDiffCell
    /// </summary>
    [DataContract(Name = "BranchDiffCell")]
    public partial class BranchDiffCell : IEquatable<BranchDiffCell>, IValidatableObject
    {
        /// <summary>
        /// Defines SourceDependencyStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceDependencyStatusEnum
        {
            /// <summary>
            /// Enum UpToDate for value: upToDate
            /// </summary>
            [EnumMember(Value = "upToDate")]
            UpToDate = 1,

            /// <summary>
            /// Enum OutOfDate for value: outOfDate
            /// </summary>
            [EnumMember(Value = "outOfDate")]
            OutOfDate = 2,

            /// <summary>
            /// Enum Unset for value: unset
            /// </summary>
            [EnumMember(Value = "unset")]
            Unset = 3

        }


        /// <summary>
        /// Gets or Sets SourceDependencyStatus
        /// </summary>
        [DataMember(Name = "sourceDependencyStatus", EmitDefaultValue = true)]
        public SourceDependencyStatusEnum? SourceDependencyStatus { get; set; }
        /// <summary>
        /// Defines DestinationDependencyStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationDependencyStatusEnum
        {
            /// <summary>
            /// Enum UpToDate for value: upToDate
            /// </summary>
            [EnumMember(Value = "upToDate")]
            UpToDate = 1,

            /// <summary>
            /// Enum OutOfDate for value: outOfDate
            /// </summary>
            [EnumMember(Value = "outOfDate")]
            OutOfDate = 2,

            /// <summary>
            /// Enum Unset for value: unset
            /// </summary>
            [EnumMember(Value = "unset")]
            Unset = 3

        }


        /// <summary>
        /// Gets or Sets DestinationDependencyStatus
        /// </summary>
        [DataMember(Name = "destinationDependencyStatus", EmitDefaultValue = true)]
        public DestinationDependencyStatusEnum? DestinationDependencyStatus { get; set; }
        /// <summary>
        /// Defines SourceSourceStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceSourceStatusEnum
        {
            /// <summary>
            /// Enum Unset for value: unset
            /// </summary>
            [EnumMember(Value = "unset")]
            Unset = 1,

            /// <summary>
            /// Enum DoNotTranslate for value: doNotTranslate
            /// </summary>
            [EnumMember(Value = "doNotTranslate")]
            DoNotTranslate = 2,

            /// <summary>
            /// Enum NotReadyForTranslation for value: notReadyForTranslation
            /// </summary>
            [EnumMember(Value = "notReadyForTranslation")]
            NotReadyForTranslation = 3,

            /// <summary>
            /// Enum ReadyForTranslation for value: readyForTranslation
            /// </summary>
            [EnumMember(Value = "readyForTranslation")]
            ReadyForTranslation = 4,

            /// <summary>
            /// Enum Locked for value: locked
            /// </summary>
            [EnumMember(Value = "locked")]
            Locked = 5,

            /// <summary>
            /// Enum LockAllLanguages for value: lockAllLanguages
            /// </summary>
            [EnumMember(Value = "lockAllLanguages")]
            LockAllLanguages = 6

        }


        /// <summary>
        /// Gets or Sets SourceSourceStatus
        /// </summary>
        [DataMember(Name = "sourceSourceStatus", EmitDefaultValue = true)]
        public SourceSourceStatusEnum? SourceSourceStatus { get; set; }
        /// <summary>
        /// Defines DestinationSourceStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationSourceStatusEnum
        {
            /// <summary>
            /// Enum Unset for value: unset
            /// </summary>
            [EnumMember(Value = "unset")]
            Unset = 1,

            /// <summary>
            /// Enum DoNotTranslate for value: doNotTranslate
            /// </summary>
            [EnumMember(Value = "doNotTranslate")]
            DoNotTranslate = 2,

            /// <summary>
            /// Enum NotReadyForTranslation for value: notReadyForTranslation
            /// </summary>
            [EnumMember(Value = "notReadyForTranslation")]
            NotReadyForTranslation = 3,

            /// <summary>
            /// Enum ReadyForTranslation for value: readyForTranslation
            /// </summary>
            [EnumMember(Value = "readyForTranslation")]
            ReadyForTranslation = 4,

            /// <summary>
            /// Enum Locked for value: locked
            /// </summary>
            [EnumMember(Value = "locked")]
            Locked = 5,

            /// <summary>
            /// Enum LockAllLanguages for value: lockAllLanguages
            /// </summary>
            [EnumMember(Value = "lockAllLanguages")]
            LockAllLanguages = 6

        }


        /// <summary>
        /// Gets or Sets DestinationSourceStatus
        /// </summary>
        [DataMember(Name = "destinationSourceStatus", EmitDefaultValue = true)]
        public DestinationSourceStatusEnum? DestinationSourceStatus { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Behind for value: behind
            /// </summary>
            [EnumMember(Value = "behind")]
            Behind = 1,

            /// <summary>
            /// Enum Ahead for value: ahead
            /// </summary>
            [EnumMember(Value = "ahead")]
            Ahead = 2,

            /// <summary>
            /// Enum Conflicted for value: conflicted
            /// </summary>
            [EnumMember(Value = "conflicted")]
            Conflicted = 3,

            /// <summary>
            /// Enum Unchanged for value: unchanged
            /// </summary>
            [EnumMember(Value = "unchanged")]
            Unchanged = 4,

            /// <summary>
            /// Enum InvalidData for value: invalidData
            /// </summary>
            [EnumMember(Value = "invalidData")]
            InvalidData = 5,

            /// <summary>
            /// Enum Na for value: na
            /// </summary>
            [EnumMember(Value = "na")]
            Na = 6,

            /// <summary>
            /// Enum Empty for value: empty
            /// </summary>
            [EnumMember(Value = "empty")]
            Empty = 7,

            /// <summary>
            /// Enum TargetTranslationEmpty for value: targetTranslationEmpty
            /// </summary>
            [EnumMember(Value = "targetTranslationEmpty")]
            TargetTranslationEmpty = 8,

            /// <summary>
            /// Enum TranslationNotReady for value: translationNotReady
            /// </summary>
            [EnumMember(Value = "translationNotReady")]
            TranslationNotReady = 9,

            /// <summary>
            /// Enum TranslationNotFound for value: translationNotFound
            /// </summary>
            [EnumMember(Value = "translationNotFound")]
            TranslationNotFound = 10,

            /// <summary>
            /// Enum SourceTargetMismatched for value: sourceTargetMismatched
            /// </summary>
            [EnumMember(Value = "sourceTargetMismatched")]
            SourceTargetMismatched = 11,

            /// <summary>
            /// Enum TargetChangedTMNotApproved for value: targetChangedTMNotApproved
            /// </summary>
            [EnumMember(Value = "targetChangedTMNotApproved")]
            TargetChangedTMNotApproved = 12,

            /// <summary>
            /// Enum TargetNotChanged for value: targetNotChanged
            /// </summary>
            [EnumMember(Value = "targetNotChanged")]
            TargetNotChanged = 13,

            /// <summary>
            /// Enum SourcedChanged for value: sourcedChanged
            /// </summary>
            [EnumMember(Value = "sourcedChanged")]
            SourcedChanged = 14,

            /// <summary>
            /// Enum TargetChanged for value: targetChanged
            /// </summary>
            [EnumMember(Value = "targetChanged")]
            TargetChanged = 15,

            /// <summary>
            /// Enum TextOverLength for value: textOverLength
            /// </summary>
            [EnumMember(Value = "textOverLength")]
            TextOverLength = 16,

            /// <summary>
            /// Enum TranslationNotChanged for value: translationNotChanged
            /// </summary>
            [EnumMember(Value = "translationNotChanged")]
            TranslationNotChanged = 17,

            /// <summary>
            /// Enum NotChanged for value: notChanged
            /// </summary>
            [EnumMember(Value = "notChanged")]
            NotChanged = 18,

            /// <summary>
            /// Enum WarningOff for value: warningOff
            /// </summary>
            [EnumMember(Value = "warningOff")]
            WarningOff = 19

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchDiffCell" /> class.
        /// </summary>
        /// <param name="sourceDependencyStatus">sourceDependencyStatus.</param>
        /// <param name="destinationDependencyStatus">destinationDependencyStatus.</param>
        /// <param name="sourceSourceStatus">sourceSourceStatus.</param>
        /// <param name="destinationSourceStatus">destinationSourceStatus.</param>
        /// <param name="sourceLengthSetting">sourceLengthSetting.</param>
        /// <param name="destinationLengthSetting">destinationLengthSetting.</param>
        /// <param name="status">status.</param>
        /// <param name="columnId">columnId.</param>
        /// <param name="sourceValue">sourceValue.</param>
        /// <param name="destinationValue">destinationValue.</param>
        public BranchDiffCell(SourceDependencyStatusEnum? sourceDependencyStatus = default(SourceDependencyStatusEnum?), DestinationDependencyStatusEnum? destinationDependencyStatus = default(DestinationDependencyStatusEnum?), SourceSourceStatusEnum? sourceSourceStatus = default(SourceSourceStatusEnum?), DestinationSourceStatusEnum? destinationSourceStatus = default(DestinationSourceStatusEnum?), int sourceLengthSetting = default(int), int destinationLengthSetting = default(int), StatusEnum? status = default(StatusEnum?), string columnId = default(string), Object sourceValue = default(Object), Object destinationValue = default(Object))
        {
            this.SourceDependencyStatus = sourceDependencyStatus;
            this.DestinationDependencyStatus = destinationDependencyStatus;
            this.SourceSourceStatus = sourceSourceStatus;
            this.DestinationSourceStatus = destinationSourceStatus;
            this.SourceLengthSetting = sourceLengthSetting;
            this.DestinationLengthSetting = destinationLengthSetting;
            this.Status = status;
            this.ColumnId = columnId;
            this.SourceValue = sourceValue;
            this.DestinationValue = destinationValue;
        }

        /// <summary>
        /// Gets or Sets SourceLengthSetting
        /// </summary>
        [DataMember(Name = "sourceLengthSetting", EmitDefaultValue = true)]
        public int SourceLengthSetting { get; set; }

        /// <summary>
        /// Gets or Sets DestinationLengthSetting
        /// </summary>
        [DataMember(Name = "destinationLengthSetting", EmitDefaultValue = true)]
        public int DestinationLengthSetting { get; set; }

        /// <summary>
        /// Gets or Sets ColumnId
        /// </summary>
        [DataMember(Name = "columnId", EmitDefaultValue = true)]
        public string ColumnId { get; set; }

        /// <summary>
        /// Gets or Sets SourceValue
        /// </summary>
        [DataMember(Name = "sourceValue", EmitDefaultValue = true)]
        public Object SourceValue { get; set; }

        /// <summary>
        /// Gets or Sets DestinationValue
        /// </summary>
        [DataMember(Name = "destinationValue", EmitDefaultValue = true)]
        public Object DestinationValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BranchDiffCell {\n");
            sb.Append("  SourceDependencyStatus: ").Append(SourceDependencyStatus).Append("\n");
            sb.Append("  DestinationDependencyStatus: ").Append(DestinationDependencyStatus).Append("\n");
            sb.Append("  SourceSourceStatus: ").Append(SourceSourceStatus).Append("\n");
            sb.Append("  DestinationSourceStatus: ").Append(DestinationSourceStatus).Append("\n");
            sb.Append("  SourceLengthSetting: ").Append(SourceLengthSetting).Append("\n");
            sb.Append("  DestinationLengthSetting: ").Append(DestinationLengthSetting).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ColumnId: ").Append(ColumnId).Append("\n");
            sb.Append("  SourceValue: ").Append(SourceValue).Append("\n");
            sb.Append("  DestinationValue: ").Append(DestinationValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BranchDiffCell);
        }

        /// <summary>
        /// Returns true if BranchDiffCell instances are equal
        /// </summary>
        /// <param name="input">Instance of BranchDiffCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BranchDiffCell input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceDependencyStatus == input.SourceDependencyStatus ||
                    this.SourceDependencyStatus.Equals(input.SourceDependencyStatus)
                ) && 
                (
                    this.DestinationDependencyStatus == input.DestinationDependencyStatus ||
                    this.DestinationDependencyStatus.Equals(input.DestinationDependencyStatus)
                ) && 
                (
                    this.SourceSourceStatus == input.SourceSourceStatus ||
                    this.SourceSourceStatus.Equals(input.SourceSourceStatus)
                ) && 
                (
                    this.DestinationSourceStatus == input.DestinationSourceStatus ||
                    this.DestinationSourceStatus.Equals(input.DestinationSourceStatus)
                ) && 
                (
                    this.SourceLengthSetting == input.SourceLengthSetting ||
                    this.SourceLengthSetting.Equals(input.SourceLengthSetting)
                ) && 
                (
                    this.DestinationLengthSetting == input.DestinationLengthSetting ||
                    this.DestinationLengthSetting.Equals(input.DestinationLengthSetting)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ColumnId == input.ColumnId ||
                    (this.ColumnId != null &&
                    this.ColumnId.Equals(input.ColumnId))
                ) && 
                (
                    this.SourceValue == input.SourceValue ||
                    (this.SourceValue != null &&
                    this.SourceValue.Equals(input.SourceValue))
                ) && 
                (
                    this.DestinationValue == input.DestinationValue ||
                    (this.DestinationValue != null &&
                    this.DestinationValue.Equals(input.DestinationValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SourceDependencyStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DestinationDependencyStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceSourceStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DestinationSourceStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceLengthSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.DestinationLengthSetting.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ColumnId != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnId.GetHashCode();
                }
                if (this.SourceValue != null)
                {
                    hashCode = (hashCode * 59) + this.SourceValue.GetHashCode();
                }
                if (this.DestinationValue != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
