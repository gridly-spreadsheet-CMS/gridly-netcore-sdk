/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// ColumnStatistic
    /// </summary>
    [DataContract(Name = "ColumnStatistic")]
    public partial class ColumnStatistic : IEquatable<ColumnStatistic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnStatistic" /> class.
        /// </summary>
        /// <param name="recordCount">recordCount.</param>
        /// <param name="wordCount">wordCount.</param>
        public ColumnStatistic(TranslationCount recordCount = default(TranslationCount), TranslationCount wordCount = default(TranslationCount))
        {
            this.RecordCount = recordCount;
            this.WordCount = wordCount;
        }

        /// <summary>
        /// Gets or Sets RecordCount
        /// </summary>
        [DataMember(Name = "recordCount", EmitDefaultValue = true)]
        public TranslationCount RecordCount { get; set; }

        /// <summary>
        /// Gets or Sets WordCount
        /// </summary>
        [DataMember(Name = "wordCount", EmitDefaultValue = true)]
        public TranslationCount WordCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnStatistic {\n");
            sb.Append("  RecordCount: ").Append(RecordCount).Append("\n");
            sb.Append("  WordCount: ").Append(WordCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColumnStatistic);
        }

        /// <summary>
        /// Returns true if ColumnStatistic instances are equal
        /// </summary>
        /// <param name="input">Instance of ColumnStatistic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnStatistic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RecordCount == input.RecordCount ||
                    (this.RecordCount != null &&
                    this.RecordCount.Equals(input.RecordCount))
                ) && 
                (
                    this.WordCount == input.WordCount ||
                    (this.WordCount != null &&
                    this.WordCount.Equals(input.WordCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordCount != null)
                {
                    hashCode = (hashCode * 59) + this.RecordCount.GetHashCode();
                }
                if (this.WordCount != null)
                {
                    hashCode = (hashCode * 59) + this.WordCount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
