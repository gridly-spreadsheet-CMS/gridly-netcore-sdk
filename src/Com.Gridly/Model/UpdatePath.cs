/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Gridly.Client.OpenAPIDateConverter;

namespace Com.Gridly.Model
{
    /// <summary>
    /// UpdatePath
    /// </summary>
    [DataContract(Name = "UpdatePath")]
    public partial class UpdatePath : IEquatable<UpdatePath>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePath" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePath() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePath" /> class.
        /// </summary>
        /// <param name="newName">newName (required).</param>
        public UpdatePath(string newName = default(string))
        {
            // to ensure "newName" is required (not null)
            if (newName == null)
            {
                throw new ArgumentNullException("newName is a required property for UpdatePath and cannot be null");
            }
            this.NewName = newName;
        }

        /// <summary>
        /// Gets or Sets NewName
        /// </summary>
        [DataMember(Name = "newName", IsRequired = true, EmitDefaultValue = true)]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePath {\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePath);
        }

        /// <summary>
        /// Returns true if UpdatePath instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePath to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePath input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewName != null)
                {
                    hashCode = (hashCode * 59) + this.NewName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NewName (string) pattern
            Regex regexNewName = new Regex(@"^[^\/\\\\]+$", RegexOptions.CultureInvariant);
            if (false == regexNewName.Match(this.NewName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewName, must match a pattern of " + regexNewName, new [] { "NewName" });
            }

            yield break;
        }
    }

}
