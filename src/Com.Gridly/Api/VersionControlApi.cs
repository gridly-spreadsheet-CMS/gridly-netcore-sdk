/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionControlApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <returns>Branch</returns>
        Branch Create(string gridId, CreateBranch createBranch);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> CreateWithHttpInfo(string gridId, CreateBranch createBranch);
        /// <summary>
        /// delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns></returns>
        void Delete(string branchId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string branchId);
        /// <summary>
        /// get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>Branch</returns>
        Branch Get(string branchId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> GetWithHttpInfo(string branchId);
        /// <summary>
        /// list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>List&lt;Branch&gt;</returns>
        List<Branch> List(string gridId);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        ApiResponse<List<Branch>> ListWithHttpInfo(string gridId);
        /// <summary>
        /// merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns></returns>
        void Merge(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MergeWithHttpInfo(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionControlApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> CreateAsync(string gridId, CreateBranch createBranch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> CreateWithHttpInfoAsync(string gridId, CreateBranch createBranch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> GetAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> GetWithHttpInfoAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        System.Threading.Tasks.Task<List<Branch>> ListAsync(string gridId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Branch>>> ListWithHttpInfoAsync(string gridId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MergeAsync(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeWithHttpInfoAsync(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionControlApi : IVersionControlApiSync, IVersionControlApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VersionControlApi : IVersionControlApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionControlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionControlApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionControlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionControlApi(String basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionControlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VersionControlApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionControlApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VersionControlApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <returns>Branch</returns>
        public Branch Create(string gridId, CreateBranch createBranch)
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = CreateWithHttpInfo(gridId, createBranch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <returns>ApiResponse of Branch</returns>
        public Com.Gridly.Client.ApiResponse<Branch> CreateWithHttpInfo(string gridId, CreateBranch createBranch)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling VersionControlApi->Create");

            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createBranch' when calling VersionControlApi->Create");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            localVarRequestOptions.Data = createBranch;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Branch>("/v1/branches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> CreateAsync(string gridId, CreateBranch createBranch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = await CreateWithHttpInfoAsync(gridId, createBranch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="createBranch">createBranch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Branch>> CreateWithHttpInfoAsync(string gridId, CreateBranch createBranch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling VersionControlApi->Create");

            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createBranch' when calling VersionControlApi->Create");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            localVarRequestOptions.Data = createBranch;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Branch>("/v1/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns></returns>
        public void Delete(string branchId)
        {
            DeleteWithHttpInfo(branchId);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> DeleteWithHttpInfo(string branchId)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Delete");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(branchId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Delete");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>Branch</returns>
        public Branch Get(string branchId)
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = GetWithHttpInfo(branchId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <returns>ApiResponse of Branch</returns>
        public Com.Gridly.Client.ApiResponse<Branch> GetWithHttpInfo(string branchId)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Get");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Branch>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> GetAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = await GetWithHttpInfoAsync(branchId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Branch>> GetWithHttpInfoAsync(string branchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Get");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Branch>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>List&lt;Branch&gt;</returns>
        public List<Branch> List(string gridId)
        {
            Com.Gridly.Client.ApiResponse<List<Branch>> localVarResponse = ListWithHttpInfo(gridId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Branch>> ListWithHttpInfo(string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling VersionControlApi->List");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Branch>>("/v1/branches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        public async System.Threading.Tasks.Task<List<Branch>> ListAsync(string gridId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Branch>> localVarResponse = await ListWithHttpInfoAsync(gridId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Branch>>> ListWithHttpInfoAsync(string gridId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling VersionControlApi->List");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Branch>>("/v1/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns></returns>
        public void Merge(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>))
        {
            MergeWithHttpInfo(branchId, destinationBranchId, mergeRecordOptions);
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> MergeWithHttpInfo(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Merge");

            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationBranchId' when calling VersionControlApi->Merge");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationBranchId", destinationBranchId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/branches/{branchId}/merge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MergeAsync(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MergeWithHttpInfoAsync(branchId, destinationBranchId, mergeRecordOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> MergeWithHttpInfoAsync(string branchId, string destinationBranchId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling VersionControlApi->Merge");

            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationBranchId' when calling VersionControlApi->Merge");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationBranchId", destinationBranchId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/branches/{branchId}/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
