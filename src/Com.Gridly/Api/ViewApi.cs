/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// export
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream Export(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ExportWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string));
        /// <summary>
        /// get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        View Get(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));
        /// <summary>
        /// importView
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns></returns>
        void ImportView(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportViewWithHttpInfo(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object));
        /// <summary>
        /// list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List&lt;View&gt;</returns>
        List<View> List(string branchId = default(string), string gridId = default(string), string type = default(string));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        ApiResponse<List<View>> ListWithHttpInfo(string branchId = default(string), string gridId = default(string), string type = default(string));
        /// <summary>
        /// merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns></returns>
        void Merge(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MergeWithHttpInfo(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ExportAsync(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetAsync(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportViewAsync(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportViewWithHttpInfoAsync(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        System.Threading.Tasks.Task<List<View>> ListAsync(string branchId = default(string), string gridId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<View>>> ListWithHttpInfoAsync(string branchId = default(string), string gridId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MergeAsync(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeWithHttpInfoAsync(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApi : IViewApiSync, IViewApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewApi : IViewApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewApi(string basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ViewApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream Export(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string))
        {
            Com.Gridly.Client.ApiResponse<System.IO.Stream> localVarResponse = ExportWithHttpInfo(viewId, columnIds, fileHeader, query, sort, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Com.Gridly.Client.ApiResponse<System.IO.Stream> ExportWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (fileHeader != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "fileHeader", fileHeader));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v1/views/{viewId}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ExportAsync(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<System.IO.Stream> localVarResponse = await ExportWithHttpInfoAsync(viewId, columnIds, fileHeader, query, sort, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="fileHeader">fileHeader (optional, default to columnName)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<System.IO.Stream>> ExportWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), string fileHeader = default(string), string query = default(string), string sort = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (fileHeader != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "fileHeader", fileHeader));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v1/views/{viewId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Export", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        public View Get(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
            Com.Gridly.Client.ApiResponse<View> localVarResponse = GetWithHttpInfo(viewId, columnIds, include, page, query, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        public Com.Gridly.Client.ApiResponse<View> GetWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<View>("/v1/views/{viewId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetAsync(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<View> localVarResponse = await GetWithHttpInfoAsync(viewId, columnIds, include, page, query, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<View>> GetWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<View>("/v1/views/{viewId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns></returns>
        public void ImportView(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object))
        {
            ImportViewWithHttpInfo(viewId, file, importRequest, type);
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> ImportViewWithHttpInfo(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", Com.Gridly.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }
            if (type != null)
            {
                localVarRequestOptions.FormParameters.Add("type", Com.Gridly.Client.ClientUtils.ParameterToString(type)); // form parameter
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/views/{viewId}/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportViewAsync(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ImportViewWithHttpInfoAsync(viewId, file, importRequest, type, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> ImportViewWithHttpInfoAsync(string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", Com.Gridly.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }
            if (type != null)
            {
                localVarRequestOptions.FormParameters.Add("type", Com.Gridly.Client.ClientUtils.ParameterToString(type)); // form parameter
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/views/{viewId}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List&lt;View&gt;</returns>
        public List<View> List(string branchId = default(string), string gridId = default(string), string type = default(string))
        {
            Com.Gridly.Client.ApiResponse<List<View>> localVarResponse = ListWithHttpInfo(branchId, gridId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<View>> ListWithHttpInfo(string branchId = default(string), string gridId = default(string), string type = default(string))
        {
            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (branchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "branchId", branchId));
            }
            if (gridId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<View>>("/v1/views", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        public async System.Threading.Tasks.Task<List<View>> ListAsync(string branchId = default(string), string gridId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<View>> localVarResponse = await ListWithHttpInfoAsync(branchId, gridId, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<View>>> ListWithHttpInfoAsync(string branchId = default(string), string gridId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (branchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "branchId", branchId));
            }
            if (gridId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<View>>("/v1/views", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns></returns>
        public void Merge(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>))
        {
            MergeWithHttpInfo(destinationViewId, viewId, mergeRecordOptions);
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> MergeWithHttpInfo(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>))
        {
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationViewId' when calling ViewApi->Merge");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Merge");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationViewId", destinationViewId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/views/{viewId}/merge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MergeAsync(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MergeWithHttpInfoAsync(destinationViewId, viewId, mergeRecordOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// merge 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> MergeWithHttpInfoAsync(string destinationViewId, string viewId, List<string> mergeRecordOptions = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationViewId' when calling ViewApi->Merge");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Merge");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationViewId", destinationViewId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/views/{viewId}/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
