/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        List<Record> Create(string viewId, List<SetRecord> createRecords, int operationIndex = 0);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        ApiResponse<List<Record>> CreateWithHttpInfo(string viewId, List<SetRecord> createRecords, int operationIndex = 0);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string viewId, DeleteRecord deleteRecord, int operationIndex = 0);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string viewId, DeleteRecord deleteRecord, int operationIndex = 0);
        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        List<Record> Fetch(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0);

        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        ApiResponse<List<Record>> FetchWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0);
        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecordHistory&gt;</returns>
        List<RecordHistory> FetchHistories(string viewId, string recordId, string page = default(string), int operationIndex = 0);

        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecordHistory&gt;</returns>
        ApiResponse<List<RecordHistory>> FetchHistoriesWithHttpInfo(string viewId, string recordId, string page = default(string), int operationIndex = 0);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        List<Record> Update(string viewId, List<SetRecord> setRecord, int operationIndex = 0);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        ApiResponse<List<Record>> UpdateWithHttpInfo(string viewId, List<SetRecord> setRecord, int operationIndex = 0);
        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Record</returns>
        Record UpdateRecord(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0);

        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Record</returns>
        ApiResponse<Record> UpdateRecordWithHttpInfo(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        System.Threading.Tasks.Task<List<Record>> CreateAsync(string viewId, List<SetRecord> createRecords, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> CreateWithHttpInfoAsync(string viewId, List<SetRecord> createRecords, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string viewId, DeleteRecord deleteRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string viewId, DeleteRecord deleteRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        System.Threading.Tasks.Task<List<Record>> FetchAsync(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// fetch
        /// </summary>
        /// <remarks>
        /// fetch
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> FetchWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordHistory&gt;</returns>
        System.Threading.Tasks.Task<List<RecordHistory>> FetchHistoriesAsync(string viewId, string recordId, string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// fetchHistories
        /// </summary>
        /// <remarks>
        /// fetchHistories
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordHistory>>> FetchHistoriesWithHttpInfoAsync(string viewId, string recordId, string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        System.Threading.Tasks.Task<List<Record>> UpdateAsync(string viewId, List<SetRecord> setRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> UpdateWithHttpInfoAsync(string viewId, List<SetRecord> setRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Record</returns>
        System.Threading.Tasks.Task<Record> UpdateRecordAsync(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// updateRecord
        /// </summary>
        /// <remarks>
        /// updateRecord
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Record)</returns>
        System.Threading.Tasks.Task<ApiResponse<Record>> UpdateRecordWithHttpInfoAsync(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordApi : IRecordApiSync, IRecordApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordApi : IRecordApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordApi(string basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecordApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        public List<Record> Create(string viewId, List<SetRecord> createRecords, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = CreateWithHttpInfo(viewId, createRecords);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Record>> CreateWithHttpInfo(string viewId, List<SetRecord> createRecords, int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Create");
            }

            // verify the required parameter 'createRecords' is set
            if (createRecords == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createRecords' when calling RecordApi->Create");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createRecords;

            localVarRequestOptions.Operation = "RecordApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        public async System.Threading.Tasks.Task<List<Record>> CreateAsync(string viewId, List<SetRecord> createRecords, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = await CreateWithHttpInfoAsync(viewId, createRecords, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createRecords">createRecords</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Record>>> CreateWithHttpInfoAsync(string viewId, List<SetRecord> createRecords, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Create");
            }

            // verify the required parameter 'createRecords' is set
            if (createRecords == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createRecords' when calling RecordApi->Create");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createRecords;

            localVarRequestOptions.Operation = "RecordApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string viewId, DeleteRecord deleteRecord, int operationIndex = 0)
        {
            DeleteWithHttpInfo(viewId, deleteRecord);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> DeleteWithHttpInfo(string viewId, DeleteRecord deleteRecord, int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Delete");
            }

            // verify the required parameter 'deleteRecord' is set
            if (deleteRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'deleteRecord' when calling RecordApi->Delete");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = deleteRecord;

            localVarRequestOptions.Operation = "RecordApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string viewId, DeleteRecord deleteRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(viewId, deleteRecord, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="deleteRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string viewId, DeleteRecord deleteRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Delete");
            }

            // verify the required parameter 'deleteRecord' is set
            if (deleteRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'deleteRecord' when calling RecordApi->Delete");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = deleteRecord;

            localVarRequestOptions.Operation = "RecordApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        public List<Record> Fetch(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = FetchWithHttpInfo(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Record>> FetchWithHttpInfo(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Fetch");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (fetchFileOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "fetchFileOption", fetchFileOption));
            }
            if (afterRecordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "afterRecordId", afterRecordId));
            }
            if (beforeRecordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "beforeRecordId", beforeRecordId));
            }

            localVarRequestOptions.Operation = "RecordApi.Fetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Fetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        public async System.Threading.Tasks.Task<List<Record>> FetchAsync(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = await FetchWithHttpInfoAsync(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// fetch fetch
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="fetchFileOption">fetchFileOption (optional)</param>
        /// <param name="afterRecordId">afterRecordId (optional)</param>
        /// <param name="beforeRecordId">beforeRecordId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Record>>> FetchWithHttpInfoAsync(string viewId, List<string> columnIds = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), FetchFileOption? fetchFileOption = default(FetchFileOption?), string afterRecordId = default(string), string beforeRecordId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Fetch");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (columnIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "columnIds", columnIds));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (fetchFileOption != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "fetchFileOption", fetchFileOption));
            }
            if (afterRecordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "afterRecordId", afterRecordId));
            }
            if (beforeRecordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "beforeRecordId", beforeRecordId));
            }

            localVarRequestOptions.Operation = "RecordApi.Fetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Fetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RecordHistory&gt;</returns>
        public List<RecordHistory> FetchHistories(string viewId, string recordId, string page = default(string), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<RecordHistory>> localVarResponse = FetchHistoriesWithHttpInfo(viewId, recordId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RecordHistory&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<RecordHistory>> FetchHistoriesWithHttpInfo(string viewId, string recordId, string page = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->FetchHistories");
            }

            // verify the required parameter 'recordId' is set
            if (recordId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'recordId' when calling RecordApi->FetchHistories");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordId", Com.Gridly.Client.ClientUtils.ParameterToString(recordId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "RecordApi.FetchHistories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecordHistory>>("/v1/views/{viewId}/records/{recordId}/histories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchHistories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecordHistory>> FetchHistoriesAsync(string viewId, string recordId, string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<RecordHistory>> localVarResponse = await FetchHistoriesWithHttpInfoAsync(viewId, recordId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// fetchHistories fetchHistories
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="recordId">recordId</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<RecordHistory>>> FetchHistoriesWithHttpInfoAsync(string viewId, string recordId, string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->FetchHistories");
            }

            // verify the required parameter 'recordId' is set
            if (recordId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'recordId' when calling RecordApi->FetchHistories");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordId", Com.Gridly.Client.ClientUtils.ParameterToString(recordId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "RecordApi.FetchHistories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecordHistory>>("/v1/views/{viewId}/records/{recordId}/histories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchHistories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Record&gt;</returns>
        public List<Record> Update(string viewId, List<SetRecord> setRecord, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = UpdateWithHttpInfo(viewId, setRecord);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Record>> UpdateWithHttpInfo(string viewId, List<SetRecord> setRecord, int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Update");
            }

            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->Update");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = setRecord;

            localVarRequestOptions.Operation = "RecordApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        public async System.Threading.Tasks.Task<List<Record>> UpdateAsync(string viewId, List<SetRecord> setRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = await UpdateWithHttpInfoAsync(viewId, setRecord, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Record>>> UpdateWithHttpInfoAsync(string viewId, List<SetRecord> setRecord, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->Update");
            }

            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->Update");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = setRecord;

            localVarRequestOptions.Operation = "RecordApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<Record>>("/v1/views/{viewId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Record</returns>
        public Record UpdateRecord(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Record> localVarResponse = UpdateRecordWithHttpInfo(id, viewId, setRecord, path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Record</returns>
        public Com.Gridly.Client.ApiResponse<Record> UpdateRecordWithHttpInfo(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'id' when calling RecordApi->UpdateRecord");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->UpdateRecord");
            }

            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->UpdateRecord");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Gridly.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = setRecord;

            localVarRequestOptions.Operation = "RecordApi.UpdateRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Record>("/v1/views/{viewId}/records/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Record</returns>
        public async System.Threading.Tasks.Task<Record> UpdateRecordAsync(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Record> localVarResponse = await UpdateRecordWithHttpInfoAsync(id, viewId, setRecord, path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// updateRecord updateRecord
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="viewId">viewId</param>
        /// <param name="setRecord"></param>
        /// <param name="path">path (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Record)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Record>> UpdateRecordWithHttpInfoAsync(string id, string viewId, SetRecord setRecord, string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'id' when calling RecordApi->UpdateRecord");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling RecordApi->UpdateRecord");
            }

            // verify the required parameter 'setRecord' is set
            if (setRecord == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'setRecord' when calling RecordApi->UpdateRecord");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Gridly.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = setRecord;

            localVarRequestOptions.Operation = "RecordApi.UpdateRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Record>("/v1/views/{viewId}/records/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
