/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewColumnApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Add(string columnId, string viewId, int operationIndex = 0);

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> AddWithHttpInfo(string columnId, string viewId, int operationIndex = 0);
        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ViewColumn&gt;</returns>
        List<ViewColumn> BulkCreate(string viewId, List<CreateColumn> createColumn, int operationIndex = 0);

        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ViewColumn&gt;</returns>
        ApiResponse<List<ViewColumn>> BulkCreateWithHttpInfo(string viewId, List<CreateColumn> createColumn, int operationIndex = 0);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Create(string viewId, CreateColumn createColumn, int operationIndex = 0);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> CreateWithHttpInfo(string viewId, CreateColumn createColumn, int operationIndex = 0);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string columnId, string viewId, int operationIndex = 0);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string columnId, string viewId, int operationIndex = 0);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Get(string columnId, string viewId, int operationIndex = 0);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> GetWithHttpInfo(string columnId, string viewId, int operationIndex = 0);
        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Remove(string columnId, string viewId, int operationIndex = 0);

        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo(string columnId, string viewId, int operationIndex = 0);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        ViewColumn Update(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        ApiResponse<ViewColumn> UpdateWithHttpInfo(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewColumnApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> AddAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add
        /// </summary>
        /// <remarks>
        /// add
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> AddWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ViewColumn&gt;</returns>
        System.Threading.Tasks.Task<List<ViewColumn>> BulkCreateAsync(string viewId, List<CreateColumn> createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// bulkCreate
        /// </summary>
        /// <remarks>
        /// bulkCreate
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ViewColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewColumn>>> BulkCreateWithHttpInfoAsync(string viewId, List<CreateColumn> createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> CreateAsync(string viewId, CreateColumn createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Column
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> CreateWithHttpInfoAsync(string viewId, CreateColumn createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> GetAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> GetWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove
        /// </summary>
        /// <remarks>
        /// remove
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        System.Threading.Tasks.Task<ViewColumn> UpdateAsync(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// update
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewColumn>> UpdateWithHttpInfoAsync(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewColumnApi : IViewColumnApiSync, IViewColumnApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewColumnApi : IViewColumnApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewColumnApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewColumnApi(string basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewColumnApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewColumnApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ViewColumnApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Add(string columnId, string viewId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = AddWithHttpInfo(columnId, viewId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public Com.Gridly.Client.ApiResponse<ViewColumn> AddWithHttpInfo(string columnId, string viewId, int operationIndex = 0)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Add");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Add");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Add";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ViewColumn>("/v1/views/{viewId}/columns/{columnId}/add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Add", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> AddAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = await AddWithHttpInfoAsync(columnId, viewId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add add
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<ViewColumn>> AddWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Add");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Add");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Add";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ViewColumn>("/v1/views/{viewId}/columns/{columnId}/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Add", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ViewColumn&gt;</returns>
        public List<ViewColumn> BulkCreate(string viewId, List<CreateColumn> createColumn, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<ViewColumn>> localVarResponse = BulkCreateWithHttpInfo(viewId, createColumn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ViewColumn&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<ViewColumn>> BulkCreateWithHttpInfo(string viewId, List<CreateColumn> createColumn, int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->BulkCreate");
            }

            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->BulkCreate");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.BulkCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ViewColumn>>("/v1/views/{viewId}/columns/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ViewColumn&gt;</returns>
        public async System.Threading.Tasks.Task<List<ViewColumn>> BulkCreateAsync(string viewId, List<CreateColumn> createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<ViewColumn>> localVarResponse = await BulkCreateWithHttpInfoAsync(viewId, createColumn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// bulkCreate bulkCreate
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ViewColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<ViewColumn>>> BulkCreateWithHttpInfoAsync(string viewId, List<CreateColumn> createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->BulkCreate");
            }

            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->BulkCreate");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.BulkCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ViewColumn>>("/v1/views/{viewId}/columns/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Create(string viewId, CreateColumn createColumn, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = CreateWithHttpInfo(viewId, createColumn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public Com.Gridly.Client.ApiResponse<ViewColumn> CreateWithHttpInfo(string viewId, CreateColumn createColumn, int operationIndex = 0)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Create");
            }

            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->Create");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ViewColumn>("/v1/views/{viewId}/columns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> CreateAsync(string viewId, CreateColumn createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = await CreateWithHttpInfoAsync(viewId, createColumn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Column
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="createColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<ViewColumn>> CreateWithHttpInfoAsync(string viewId, CreateColumn createColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Create");
            }

            // verify the required parameter 'createColumn' is set
            if (createColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createColumn' when calling ViewColumnApi->Create");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = createColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ViewColumn>("/v1/views/{viewId}/columns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string columnId, string viewId, int operationIndex = 0)
        {
            DeleteWithHttpInfo(columnId, viewId);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> DeleteWithHttpInfo(string columnId, string viewId, int operationIndex = 0)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Delete");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Delete");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(columnId, viewId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Delete");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Delete");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Get(string columnId, string viewId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = GetWithHttpInfo(columnId, viewId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public Com.Gridly.Client.ApiResponse<ViewColumn> GetWithHttpInfo(string columnId, string viewId, int operationIndex = 0)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Get");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Get");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ViewColumn>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> GetAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = await GetWithHttpInfoAsync(columnId, viewId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<ViewColumn>> GetWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Get");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Get");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ViewColumn>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Remove(string columnId, string viewId, int operationIndex = 0)
        {
            RemoveWithHttpInfo(columnId, viewId);
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> RemoveWithHttpInfo(string columnId, string viewId, int operationIndex = 0)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Remove");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Remove");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Remove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/views/{viewId}/columns/{columnId}/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Remove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveWithHttpInfoAsync(columnId, viewId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// remove remove
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> RemoveWithHttpInfoAsync(string columnId, string viewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Remove");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Remove");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            localVarRequestOptions.Operation = "ViewColumnApi.Remove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/views/{viewId}/columns/{columnId}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Remove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ViewColumn</returns>
        public ViewColumn Update(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = UpdateWithHttpInfo(columnId, viewId, updateColumn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ViewColumn</returns>
        public Com.Gridly.Client.ApiResponse<ViewColumn> UpdateWithHttpInfo(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0)
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Update");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Update");
            }

            // verify the required parameter 'updateColumn' is set
            if (updateColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'updateColumn' when calling ViewColumnApi->Update");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = updateColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ViewColumn>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ViewColumn</returns>
        public async System.Threading.Tasks.Task<ViewColumn> UpdateAsync(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<ViewColumn> localVarResponse = await UpdateWithHttpInfoAsync(columnId, viewId, updateColumn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update update
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="columnId">columnId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="updateColumn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ViewColumn)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<ViewColumn>> UpdateWithHttpInfoAsync(string columnId, string viewId, UpdateColumn updateColumn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'columnId' is set
            if (columnId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewColumnApi->Update");
            }

            // verify the required parameter 'viewId' is set
            if (viewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewColumnApi->Update");
            }

            // verify the required parameter 'updateColumn' is set
            if (updateColumn == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'updateColumn' when calling ViewColumnApi->Update");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.Data = updateColumn;

            localVarRequestOptions.Operation = "ViewColumnApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ViewColumn>("/v1/views/{viewId}/columns/{columnId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
