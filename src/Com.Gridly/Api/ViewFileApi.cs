/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewFileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// download
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>Object</returns>
        Object Download(string fileId, string viewId);

        /// <summary>
        /// download
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DownloadWithHttpInfo(string fileId, string viewId);
        /// <summary>
        /// upload
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <returns>UploadedFile</returns>
        UploadedFile Upload(string viewId, Object columnId, System.IO.Stream file, Object recordId);

        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <returns>ApiResponse of UploadedFile</returns>
        ApiResponse<UploadedFile> UploadWithHttpInfo(string viewId, Object columnId, System.IO.Stream file, Object recordId);
        /// <summary>
        /// uploadZip
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <returns>List&lt;Record&gt;</returns>
        List<Record> UploadZip(string viewId, Object columnId, Object file = default(Object));

        /// <summary>
        /// uploadZip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        ApiResponse<List<Record>> UploadZipWithHttpInfo(string viewId, Object columnId, Object file = default(Object));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewFileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// download
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DownloadAsync(string fileId, string viewId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// download
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadWithHttpInfoAsync(string fileId, string viewId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadedFile</returns>
        System.Threading.Tasks.Task<UploadedFile> UploadAsync(string viewId, Object columnId, System.IO.Stream file, Object recordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadedFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadedFile>> UploadWithHttpInfoAsync(string viewId, Object columnId, System.IO.Stream file, Object recordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// uploadZip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        System.Threading.Tasks.Task<List<Record>> UploadZipAsync(string viewId, Object columnId, Object file = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// uploadZip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Record>>> UploadZipWithHttpInfoAsync(string viewId, Object columnId, Object file = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewFileApi : IViewFileApiSync, IViewFileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewFileApi : IViewFileApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewFileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewFileApi(String basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewFileApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewFileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ViewFileApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// download 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>Object</returns>
        public Object Download(string fileId, string viewId)
        {
            Com.Gridly.Client.ApiResponse<Object> localVarResponse = DownloadWithHttpInfo(fileId, viewId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Gridly.Client.ApiResponse<Object> DownloadWithHttpInfo(string fileId, string viewId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'fileId' when calling ViewFileApi->Download");

            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->Download");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Com.Gridly.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/views/{viewId}/files/{fileId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Download", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// download 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DownloadAsync(string fileId, string viewId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Object> localVarResponse = await DownloadWithHttpInfoAsync(fileId, viewId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">fileId</param>
        /// <param name="viewId">viewId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DownloadWithHttpInfoAsync(string fileId, string viewId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'fileId' when calling ViewFileApi->Download");

            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->Download");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Com.Gridly.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/views/{viewId}/files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Download", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <returns>UploadedFile</returns>
        public UploadedFile Upload(string viewId, Object columnId, System.IO.Stream file, Object recordId)
        {
            Com.Gridly.Client.ApiResponse<UploadedFile> localVarResponse = UploadWithHttpInfo(viewId, columnId, file, recordId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <returns>ApiResponse of UploadedFile</returns>
        public Com.Gridly.Client.ApiResponse<UploadedFile> UploadWithHttpInfo(string viewId, Object columnId, System.IO.Stream file, Object recordId)
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->Upload");

            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewFileApi->Upload");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'file' when calling ViewFileApi->Upload");

            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'recordId' when calling ViewFileApi->Upload");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FormParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("recordId", Com.Gridly.Client.ClientUtils.ParameterToString(recordId)); // form parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadedFile>("/v1/views/{viewId}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Upload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadedFile</returns>
        public async System.Threading.Tasks.Task<UploadedFile> UploadAsync(string viewId, Object columnId, System.IO.Stream file, Object recordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<UploadedFile> localVarResponse = await UploadWithHttpInfoAsync(viewId, columnId, file, recordId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file">file</param>
        /// <param name="recordId">recordId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadedFile)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<UploadedFile>> UploadWithHttpInfoAsync(string viewId, Object columnId, System.IO.Stream file, Object recordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->Upload");

            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewFileApi->Upload");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'file' when calling ViewFileApi->Upload");

            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'recordId' when calling ViewFileApi->Upload");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FormParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("recordId", Com.Gridly.Client.ClientUtils.ParameterToString(recordId)); // form parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadedFile>("/v1/views/{viewId}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Upload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// uploadZip 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <returns>List&lt;Record&gt;</returns>
        public List<Record> UploadZip(string viewId, Object columnId, Object file = default(Object))
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = UploadZipWithHttpInfo(viewId, columnId, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// uploadZip 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Record&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Record>> UploadZipWithHttpInfo(string viewId, Object columnId, Object file = default(Object))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->UploadZip");

            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewFileApi->UploadZip");

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FormParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // form parameter
            if (file != null)
            {
                localVarRequestOptions.FormParameters.Add("file", Com.Gridly.Client.ClientUtils.ParameterToString(file)); // form parameter
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Record>>("/v1/views/{viewId}/files/zip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// uploadZip 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Record&gt;</returns>
        public async System.Threading.Tasks.Task<List<Record>> UploadZipAsync(string viewId, Object columnId, Object file = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Record>> localVarResponse = await UploadZipWithHttpInfoAsync(viewId, columnId, file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// uploadZip 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnId">columnId</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Record&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Record>>> UploadZipWithHttpInfoAsync(string viewId, Object columnId, Object file = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'viewId' when calling ViewFileApi->UploadZip");

            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'columnId' when calling ViewFileApi->UploadZip");


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };


            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("viewId", Com.Gridly.Client.ClientUtils.ParameterToString(viewId)); // path parameter
            localVarRequestOptions.FormParameters.Add("columnId", Com.Gridly.Client.ClientUtils.ParameterToString(columnId)); // form parameter
            if (file != null)
            {
                localVarRequestOptions.FormParameters.Add("file", Com.Gridly.Client.ClientUtils.ParameterToString(file)); // form parameter
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Record>>("/v1/views/{viewId}/files/zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
