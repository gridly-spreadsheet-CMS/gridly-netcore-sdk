/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.29.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid Create(string dbId, CreateGrid createGrid, int operationIndex = 0);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> CreateWithHttpInfo(string dbId, CreateGrid createGrid, int operationIndex = 0);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string gridId, int operationIndex = 0);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string gridId, int operationIndex = 0);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid Get(string gridId, int operationIndex = 0);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GetWithHttpInfo(string gridId, int operationIndex = 0);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Grid&gt;</returns>
        List<Grid> List(string dbId, int operationIndex = 0);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        ApiResponse<List<Grid>> ListWithHttpInfo(string dbId, int operationIndex = 0);
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Grid&gt;</returns>
        List<Grid> ListTemplateGrids(int operationIndex = 0);

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        Grid Update(string gridId, UpdateGrid updateGrid, int operationIndex = 0);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> UpdateWithHttpInfo(string gridId, UpdateGrid updateGrid, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> CreateAsync(string dbId, CreateGrid createGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Create a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> CreateWithHttpInfoAsync(string dbId, CreateGrid createGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Delete a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GetAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GetWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        System.Threading.Tasks.Task<List<Grid>> ListAsync(string dbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Get a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListWithHttpInfoAsync(string dbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// listTemplateGrids
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> UpdateAsync(string gridId, UpdateGrid updateGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// Update a Grid
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> UpdateWithHttpInfoAsync(string gridId, UpdateGrid updateGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApi : IGridApiSync, IGridApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GridApi : IGridApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi(string basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GridApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GridApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid Create(string dbId, CreateGrid createGrid, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = CreateWithHttpInfo(dbId, createGrid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public Com.Gridly.Client.ApiResponse<Grid> CreateWithHttpInfo(string dbId, CreateGrid createGrid, int operationIndex = 0)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            }

            // verify the required parameter 'createGrid' is set
            if (createGrid == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createGrid' when calling GridApi->Create");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "dbId", dbId));
            localVarRequestOptions.Data = createGrid;

            localVarRequestOptions.Operation = "GridApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Grid>("/v1/grids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> CreateAsync(string dbId, CreateGrid createGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = await CreateWithHttpInfoAsync(dbId, createGrid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Create a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Grid>> CreateWithHttpInfoAsync(string dbId, CreateGrid createGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            }

            // verify the required parameter 'createGrid' is set
            if (createGrid == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createGrid' when calling GridApi->Create");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "dbId", dbId));
            localVarRequestOptions.Data = createGrid;

            localVarRequestOptions.Operation = "GridApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Grid>("/v1/grids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string gridId, int operationIndex = 0)
        {
            DeleteWithHttpInfo(gridId);
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> DeleteWithHttpInfo(string gridId, int operationIndex = 0)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter

            localVarRequestOptions.Operation = "GridApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(gridId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete Delete a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter

            localVarRequestOptions.Operation = "GridApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid Get(string gridId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = GetWithHttpInfo(gridId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public Com.Gridly.Client.ApiResponse<Grid> GetWithHttpInfo(string gridId, int operationIndex = 0)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter

            localVarRequestOptions.Operation = "GridApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Grid>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GetAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = await GetWithHttpInfoAsync(gridId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Grid>> GetWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter

            localVarRequestOptions.Operation = "GridApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Grid>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Grid&gt;</returns>
        public List<Grid> List(string dbId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Grid>> localVarResponse = ListWithHttpInfo(dbId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Grid>> ListWithHttpInfo(string dbId, int operationIndex = 0)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "dbId", dbId));

            localVarRequestOptions.Operation = "GridApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Grid>>("/v1/grids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListAsync(string dbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Grid>> localVarResponse = await ListWithHttpInfoAsync(dbId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list Get a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Grid>>> ListWithHttpInfoAsync(string dbId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "dbId", dbId));

            localVarRequestOptions.Operation = "GridApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Grid>>("/v1/grids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Grid&gt;</returns>
        public List<Grid> ListTemplateGrids(int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Grid>> localVarResponse = ListTemplateGridsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo(int operationIndex = 0)
        {
            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GridApi.ListTemplateGrids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Grid>>("/v1/template-grids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Grid>> localVarResponse = await ListTemplateGridsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// listTemplateGrids listTemplateGrids
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GridApi.ListTemplateGrids";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Grid>>("/v1/template-grids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Grid</returns>
        public Grid Update(string gridId, UpdateGrid updateGrid, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = UpdateWithHttpInfo(gridId, updateGrid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Grid</returns>
        public Com.Gridly.Client.ApiResponse<Grid> UpdateWithHttpInfo(string gridId, UpdateGrid updateGrid, int operationIndex = 0)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            }

            // verify the required parameter 'updateGrid' is set
            if (updateGrid == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'updateGrid' when calling GridApi->Update");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter
            localVarRequestOptions.Data = updateGrid;

            localVarRequestOptions.Operation = "GridApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Grid>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> UpdateAsync(string gridId, UpdateGrid updateGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Grid> localVarResponse = await UpdateWithHttpInfoAsync(gridId, updateGrid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update Update a Grid
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateGrid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Grid>> UpdateWithHttpInfoAsync(string gridId, UpdateGrid updateGrid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            }

            // verify the required parameter 'updateGrid' is set
            if (updateGrid == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'updateGrid' when calling GridApi->Update");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("gridId", Com.Gridly.Client.ClientUtils.ParameterToString(gridId)); // path parameter
            localVarRequestOptions.Data = updateGrid;

            localVarRequestOptions.Operation = "GridApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Grid>("/v1/grids/{gridId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
