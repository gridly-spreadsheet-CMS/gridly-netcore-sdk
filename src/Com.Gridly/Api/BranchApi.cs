/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBranchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Branch</returns>
        Branch Create(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> CreateWithHttpInfo(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0);
        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task CreateDiffCheck(string sourceViewId, string destinationViewId, int operationIndex = 0);

        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> CreateDiffCheckWithHttpInfo(string sourceViewId, string destinationViewId, int operationIndex = 0);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string branchId, int operationIndex = 0);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string branchId, int operationIndex = 0);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Branch</returns>
        Branch Get(string branchId, int operationIndex = 0);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> GetWithHttpInfo(string branchId, int operationIndex = 0);
        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BranchDiffRecord&gt;</returns>
        List<BranchDiffRecord> GetDiffCheck(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0);

        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BranchDiffRecord&gt;</returns>
        ApiResponse<List<BranchDiffRecord>> GetDiffCheckWithHttpInfo(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Branch&gt;</returns>
        List<Branch> List(string gridId, int operationIndex = 0);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        ApiResponse<List<Branch>> ListWithHttpInfo(string gridId, int operationIndex = 0);
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task Merge(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> MergeWithHttpInfo(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBranchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> CreateAsync(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// create
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> CreateWithHttpInfoAsync(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateDiffCheckAsync(string sourceViewId, string destinationViewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// createDiffCheck
        /// </summary>
        /// <remarks>
        /// createDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateDiffCheckWithHttpInfoAsync(string sourceViewId, string destinationViewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// delete
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> GetAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// get
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> GetWithHttpInfoAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BranchDiffRecord&gt;</returns>
        System.Threading.Tasks.Task<List<BranchDiffRecord>> GetDiffCheckAsync(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// getDiffCheck
        /// </summary>
        /// <remarks>
        /// getDiffCheck
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BranchDiffRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BranchDiffRecord>>> GetDiffCheckWithHttpInfoAsync(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        System.Threading.Tasks.Task<List<Branch>> ListAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// list
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Branch>>> ListWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> MergeAsync(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// merge
        /// </summary>
        /// <remarks>
        /// merge
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> MergeWithHttpInfoAsync(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBranchApi : IBranchApiSync, IBranchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BranchApi : IBranchApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BranchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BranchApi(string basePath)
        {
            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                new Com.Gridly.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BranchApi(Com.Gridly.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Gridly.Client.Configuration.MergeConfigurations(
                Com.Gridly.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Gridly.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BranchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BranchApi(Com.Gridly.Client.ISynchronousClient client, Com.Gridly.Client.IAsynchronousClient asyncClient, Com.Gridly.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Gridly.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Gridly.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Branch</returns>
        public Branch Create(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = CreateWithHttpInfo(createBranch, gridId, branchId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Branch</returns>
        public Com.Gridly.Client.ApiResponse<Branch> CreateWithHttpInfo(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createBranch' when calling BranchApi->Create");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (gridId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            }
            if (branchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "branchId", branchId));
            }
            localVarRequestOptions.Data = createBranch;

            localVarRequestOptions.Operation = "BranchApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Branch>("/v1/branches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> CreateAsync(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = await CreateWithHttpInfoAsync(createBranch, gridId, branchId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create create
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBranch"></param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Branch>> CreateWithHttpInfoAsync(CreateBranch createBranch, string gridId = default(string), string branchId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createBranch' is set
            if (createBranch == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'createBranch' when calling BranchApi->Create");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (gridId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));
            }
            if (branchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "branchId", branchId));
            }
            localVarRequestOptions.Data = createBranch;

            localVarRequestOptions.Operation = "BranchApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Branch>("/v1/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task CreateDiffCheck(string sourceViewId, string destinationViewId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Task> localVarResponse = CreateDiffCheckWithHttpInfo(sourceViewId, destinationViewId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public Com.Gridly.Client.ApiResponse<Task> CreateDiffCheckWithHttpInfo(string sourceViewId, string destinationViewId, int operationIndex = 0)
        {
            // verify the required parameter 'sourceViewId' is set
            if (sourceViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'sourceViewId' when calling BranchApi->CreateDiffCheck");
            }

            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationViewId' when calling BranchApi->CreateDiffCheck");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sourceViewId", sourceViewId));
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationViewId", destinationViewId));

            localVarRequestOptions.Operation = "BranchApi.CreateDiffCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Task>("/v1/branches/diffcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiffCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateDiffCheckAsync(string sourceViewId, string destinationViewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Task> localVarResponse = await CreateDiffCheckWithHttpInfoAsync(sourceViewId, destinationViewId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// createDiffCheck createDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceViewId">sourceViewId</param>
        /// <param name="destinationViewId">destinationViewId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Task>> CreateDiffCheckWithHttpInfoAsync(string sourceViewId, string destinationViewId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceViewId' is set
            if (sourceViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'sourceViewId' when calling BranchApi->CreateDiffCheck");
            }

            // verify the required parameter 'destinationViewId' is set
            if (destinationViewId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationViewId' when calling BranchApi->CreateDiffCheck");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "sourceViewId", sourceViewId));
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationViewId", destinationViewId));

            localVarRequestOptions.Operation = "BranchApi.CreateDiffCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Task>("/v1/branches/diffcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiffCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string branchId, int operationIndex = 0)
        {
            DeleteWithHttpInfo(branchId);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Gridly.Client.ApiResponse<Object> DeleteWithHttpInfo(string branchId, int operationIndex = 0)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Delete");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "BranchApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(branchId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete delete
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Delete");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "BranchApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Branch</returns>
        public Branch Get(string branchId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = GetWithHttpInfo(branchId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Branch</returns>
        public Com.Gridly.Client.ApiResponse<Branch> GetWithHttpInfo(string branchId, int operationIndex = 0)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Get");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "BranchApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Branch>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> GetAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Branch> localVarResponse = await GetWithHttpInfoAsync(branchId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get get
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Branch>> GetWithHttpInfoAsync(string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Get");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "BranchApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Branch>("/v1/branches/{branchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BranchDiffRecord&gt;</returns>
        public List<BranchDiffRecord> GetDiffCheck(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<BranchDiffRecord>> localVarResponse = GetDiffCheckWithHttpInfo(taskId, mergeRecordOptions, query, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BranchDiffRecord&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<BranchDiffRecord>> GetDiffCheckWithHttpInfo(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'taskId' when calling BranchApi->GetDiffCheck");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", Com.Gridly.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "BranchApi.GetDiffCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BranchDiffRecord>>("/v1/branches/diffcheck/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiffCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BranchDiffRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<BranchDiffRecord>> GetDiffCheckAsync(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<BranchDiffRecord>> localVarResponse = await GetDiffCheckWithHttpInfoAsync(taskId, mergeRecordOptions, query, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// getDiffCheck getDiffCheck
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">taskId</param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BranchDiffRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<BranchDiffRecord>>> GetDiffCheckWithHttpInfoAsync(string taskId, List<string> mergeRecordOptions = default(List<string>), string query = default(string), string page = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'taskId' when calling BranchApi->GetDiffCheck");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", Com.Gridly.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "BranchApi.GetDiffCheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BranchDiffRecord>>("/v1/branches/diffcheck/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiffCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Branch&gt;</returns>
        public List<Branch> List(string gridId, int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<List<Branch>> localVarResponse = ListWithHttpInfo(gridId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        public Com.Gridly.Client.ApiResponse<List<Branch>> ListWithHttpInfo(string gridId, int operationIndex = 0)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling BranchApi->List");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));

            localVarRequestOptions.Operation = "BranchApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Branch>>("/v1/branches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        public async System.Threading.Tasks.Task<List<Branch>> ListAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<List<Branch>> localVarResponse = await ListWithHttpInfoAsync(gridId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list list
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<List<Branch>>> ListWithHttpInfoAsync(string gridId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'gridId' when calling BranchApi->List");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "gridId", gridId));

            localVarRequestOptions.Operation = "BranchApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Branch>>("/v1/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task Merge(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0)
        {
            Com.Gridly.Client.ApiResponse<Task> localVarResponse = MergeWithHttpInfo(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public Com.Gridly.Client.ApiResponse<Task> MergeWithHttpInfo(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0)
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Merge");
            }

            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationBranchId' when calling BranchApi->Merge");
            }

            // verify the required parameter 'mergeBranchRequest' is set
            if (mergeBranchRequest == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'mergeBranchRequest' when calling BranchApi->Merge");
            }

            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationBranchId", destinationBranchId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }
            localVarRequestOptions.Data = mergeBranchRequest;

            localVarRequestOptions.Operation = "BranchApi.Merge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Task>("/v1/branches/{branchId}/merge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> MergeAsync(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Gridly.Client.ApiResponse<Task> localVarResponse = await MergeWithHttpInfoAsync(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// merge merge
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId</param>
        /// <param name="destinationBranchId">destinationBranchId</param>
        /// <param name="mergeBranchRequest"></param>
        /// <param name="mergeRecordOptions">mergeRecordOptions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Com.Gridly.Client.ApiResponse<Task>> MergeWithHttpInfoAsync(string branchId, string destinationBranchId, MergeBranchRequest mergeBranchRequest, List<string> mergeRecordOptions = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'branchId' when calling BranchApi->Merge");
            }

            // verify the required parameter 'destinationBranchId' is set
            if (destinationBranchId == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'destinationBranchId' when calling BranchApi->Merge");
            }

            // verify the required parameter 'mergeBranchRequest' is set
            if (mergeBranchRequest == null)
            {
                throw new Com.Gridly.Client.ApiException(400, "Missing required parameter 'mergeBranchRequest' when calling BranchApi->Merge");
            }


            Com.Gridly.Client.RequestOptions localVarRequestOptions = new Com.Gridly.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Gridly.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Gridly.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("branchId", Com.Gridly.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("", "destinationBranchId", destinationBranchId));
            if (mergeRecordOptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Gridly.Client.ClientUtils.ParameterToMultiMap("multi", "mergeRecordOptions", mergeRecordOptions));
            }
            localVarRequestOptions.Data = mergeBranchRequest;

            localVarRequestOptions.Operation = "BranchApi.Merge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Task>("/v1/branches/{branchId}/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Merge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
