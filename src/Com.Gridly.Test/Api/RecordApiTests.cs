/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Gridly.Client;
using Com.Gridly.Api;
// uncomment below to import models
//using Com.Gridly.Model;

namespace Com.Gridly.Test.Api
{
    /// <summary>
    ///  Class for testing RecordApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RecordApiTests : IDisposable
    {
        private RecordApi instance;

        public RecordApiTests()
        {
            instance = new RecordApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RecordApi
            //Assert.IsType<RecordApi>(instance);
        }

        /// <summary>
        /// Test Create
        /// </summary>
        [Fact]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //List<SetRecord> createRecords = null;
            //var response = instance.Create(viewId, createRecords);
            //Assert.IsType<List<Record>>(response);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //DeleteRecord deleteRecord = null;
            //instance.Delete(viewId, deleteRecord);
        }

        /// <summary>
        /// Test Fetch
        /// </summary>
        [Fact]
        public void FetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //List<string> columnIds = null;
            //string page = null;
            //string query = null;
            //string sort = null;
            //FetchFileOption? fetchFileOption = null;
            //string afterRecordId = null;
            //string beforeRecordId = null;
            //var response = instance.Fetch(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId);
            //Assert.IsType<List<Record>>(response);
        }

        /// <summary>
        /// Test FetchHistories
        /// </summary>
        [Fact]
        public void FetchHistoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //string recordId = null;
            //FetchRecordHistoryRequest fetchRequest = null;
            //var response = instance.FetchHistories(viewId, recordId, fetchRequest);
            //Assert.IsType<List<RecordHistory>>(response);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Fact]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //List<SetRecord> setRecord = null;
            //var response = instance.Update(viewId, setRecord);
            //Assert.IsType<List<Record>>(response);
        }

        /// <summary>
        /// Test UpdateRecord
        /// </summary>
        [Fact]
        public void UpdateRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string viewId = null;
            //SetRecord setRecord = null;
            //string path = null;
            //var response = instance.UpdateRecord(id, viewId, setRecord, path);
            //Assert.IsType<Record>(response);
        }
    }
}
