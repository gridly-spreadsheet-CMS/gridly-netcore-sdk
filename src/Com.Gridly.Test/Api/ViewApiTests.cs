/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Com.Gridly.Client;
using Com.Gridly.Api;
// uncomment below to import models
//using Com.Gridly.Model;

namespace Com.Gridly.Test.Api
{
    /// <summary>
    ///  Class for testing ViewApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ViewApiTests : IDisposable
    {
        private ViewApi instance;

        public ViewApiTests()
        {
            instance = new ViewApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ViewApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ViewApi
            //Assert.IsType<ViewApi>(instance);
        }

        /// <summary>
        /// Test Export
        /// </summary>
        [Fact]
        public void ExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //List<string> columnIds = null;
            //string fileHeader = null;
            //string query = null;
            //string sort = null;
            //string type = null;
            //var response = instance.Export(viewId, columnIds, fileHeader, query, sort, type);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //List<string> columnIds = null;
            //List<string> include = null;
            //string page = null;
            //string query = null;
            //string sort = null;
            //var response = instance.Get(viewId, columnIds, include, page, query, sort);
            //Assert.IsType<View>(response);
        }

        /// <summary>
        /// Test ImportView
        /// </summary>
        [Fact]
        public void ImportViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewId = null;
            //System.IO.Stream file = null;
            //Object importRequest = null;
            //Object type = null;
            //instance.ImportView(viewId, file, importRequest, type);
        }

        /// <summary>
        /// Test List
        /// </summary>
        [Fact]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string branchId = null;
            //string gridId = null;
            //string type = null;
            //var response = instance.List(branchId, gridId, type);
            //Assert.IsType<List<View>>(response);
        }

        /// <summary>
        /// Test Merge
        /// </summary>
        [Fact]
        public void MergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string destinationViewId = null;
            //string viewId = null;
            //List<string> mergeRecordOptions = null;
            //instance.Merge(destinationViewId, viewId, mergeRecordOptions);
        }
    }
}
